// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  phone String?
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  birthDay DateTime?
  role String?
  gender String?
  addressDiary Json[] 
  cartItemsCount Int?

  collectedVouchers Json[]

  orders Order[]
  accounts Account[]
  packages Package[]
  cartItems CartItem[]
  paymentOptions PaymentOption[] @relation("userPaymentOptions")

  favouriteItemIds String[] @db.ObjectId
  favouriteItems Product[] @relation(fields: [favouriteItemIds], references: [id])
  searchIds String[] @db.ObjectId
  searches Search[] @relation(fields: [searchIds], references: [id])
  cancellationRequests CancellationRequest[]
  returnRequests ReturnRequest[]

  behaviour UserBehaviour?
}

model UserBehaviour {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId @unique
  user User @relation(fields: [userId], references: [id])

  count Int @default(0)
  
  browsingHistory Json[]
  browsingHistoryProductIds String[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete : Cascade)

  @@unique([provider, providerAccountId])
}

model Search {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  query String
  createdAt DateTime @default(now())

  userIds String[] @db.ObjectId
  user User[] @relation(fields: [userIds], references: [id])
} 

model AddressOption {    
  id String @id @default(auto()) @map("_id") @db.ObjectId
  adress String
  zipCode String
  country String
  province String
  city String
}

model Vendor {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  phone String?
  profile Json?
  address Json?
  Id_BankInfo Json?
  allInfoProvided Boolean?
  superTokensUserId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
  paymentOptions PaymentOption[]
  store Store?
}

model Store {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  url String?
  name String?
  logo String?
  banner String?
  storePages Json[]
  description String?
  posRatings Int @default(0)
  neuRatings Int @default(0)
  negRatings Int @default(0)
  ratingsCount Int @default(0)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  geoChartInfo GeoChartInfo?
  profileMetricsInfo ProfileMetricsInfo?

  vendorId String @db.ObjectId @unique
  vendor Vendor @relation(fields: [vendorId], references: [id])    

  orderIds String[] @db.ObjectId
  orders Order[] @relation(fields: [orderIds], references: [id])

  returnRequestIds String[] @db.ObjectId
  returnRequests ReturnRequest[] @relation(fields: [returnRequestIds], references: [id])

  products Product[]
  orderedProduct OrderedProduct[]
  questionsBuckets QuestionsBucket[]
  promoToolsBuckets PromoToolsBucket[]

  ratingAndReviewBuckets RatingAndReviewBucket[]
}   

type GeoChartInfo {
  refreshedAt DateTime
  customersPerData Json[]
  customersCountData Json[]
}

type ProfileMetricsInfo {
  refreshedAt DateTime
  totalSales Int
  returnPer Float
  successPer Float
  cancellationPer Float
  productReviewsData ProductReviewsData
}

type ProductReviewsData {
  avgRating Float
  ratingsCount Int
  detailedRatingsCount Json
}

model StoreLayouts {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  banner Json
  product Json?
  promotion Json?
}

model Product {
  //General Info Section
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  SKU String?
  name String
  image String?
  variants Json?
  attributes Json
  details String[]
  category String?
  storeName String
  keywords  String[]
  combinations Json[]
  categoryString String?
  categoryTreeData Json[]
  detailedImages String[]
  highlightsQuillData String?
  descriptionQuillData String?

  //Price Info Section
  price Int
  promoPrice Int?
  quantity Int
  promoPriceEndingDate DateTime?
  promoPriceStartingDate DateTime?

  //Extra Embedded Info Section
  clicks Int @default(0)
  superTokensUserId String
  //Ratings count of each specific rating number
  detailedRatingsCount Json
  numOfSales Int @default(0)
  ratingsSum Int @default(0)
  avgRating Float @default(0)
  ratingsCount Int @default(0)
  questionsCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])

  favouritedByIds String[] @db.ObjectId
  favouritedBy User[] @relation(fields: [favouritedByIds], references: [id])

  questionsBuckets QuestionsBucket[]
  
  cartItems CartItem[]

  ratingAndReviewBuckets RatingAndReviewBucket[]
}

model ProductClick {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  superTokensUserId String
  productId String
  storeId String
}

model Keyword {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  children Category[] @relation("SubCategories")

  parent Category? @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String? @db.ObjectId
  // productIds String[] @db.ObjectId
  // products Product[] @relation(fields: [productIds], references: [id])
}

model Sales {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
}

model Order { 
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  createdAt DateTime @default(now())
  totalAmmount Int
  totalQuantity Int
  shippingAddress Json?
  billingAddress Json?
  emailTo String?
    boughtFromLocation String

  customerId String @db.ObjectId
  customer User @relation(fields: [customerId], references: [id])

  packages Package[]
  cancellationRequests CancellationRequest[]
  returnRequests ReturnRequest[]
  
  associatedStoreIds String[] @db.ObjectId
  associatedStores Store[] @relation(fields: [associatedStoreIds], references: [id])

  transaction Transaction?
} 

model Package {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  ammount Int
  storeId String
  status String
  createdAt DateTime @default(now())
  superTokensUserId String?
  delieveredAt DateTime? @updatedAt

  orderedProducts OrderedProduct[]

  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id])

  customerId String @db.ObjectId
  customer User @relation(fields: [customerId], references: [id])
}

model OrderedProduct {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  status String
  cancellationReason String?
  returnReason String?
  quantity Int 
  superTokensUserId String?
  priceAtOrderTime Int
  selectedCombination Json?
  hasBeenReviewed Boolean @default(false)
  product Json?

  packageId String @db.ObjectId
  package Package @relation(fields: [packageId], references: [id])

  cancellationRequestId String? @db.ObjectId
  cancellationRequest CancellationRequest? @relation(fields: [cancellationRequestId], references: [id])

  returnRequestId String? @db.ObjectId
  returnRequest ReturnRequest? @relation(fields: [returnRequestId], references: [id])

  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])
}

model CancellationRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  cancelledOn DateTime?
  status String

  orderedProducts OrderedProduct[]

  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id])

  requesterId String @db.ObjectId
  requester User @relation(fields: [requesterId], references: [id])
}

model ReturnRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  proofImagesData Json[]
  orderFeedback String?
  returnedOn DateTime?
  proofImages String[]
  approved Boolean?
  rejected Boolean?
  status String

  orderedProducts OrderedProduct[]

  storeIds String[] @db.ObjectId
  stores Store[] @relation(fields: [storeIds], references: [id])

  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id])

  requesterId String @db.ObjectId
  requester User @relation(fields: [requesterId], references: [id])
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  selectedCombination Json?

  userId String @db.ObjectId
  cart User @relation(fields: [userId], references: [id]) 

  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete : Cascade)
}

model Transaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  createdAt DateTime @default(now())
  ammount Int
  type String?
  method String?
  status String?

  orderId String @db.ObjectId @unique
  order Order @relation(fields: [orderId], references: [id])

  vendorId String @db.ObjectId
  vendor Vendor @relation(fields: [vendorId], references: [id])
}

model PaymentOption {
  id String @id @default(auto()) @map("_id") @db.ObjectId  
  name String?
  isDefault Boolean?
  cardHolderName String?
  cardNumber String?
  CVV String?
  expirationDate DateTime?
  bankAccountNumber String?
  easyPaisaAccountNumber String?
  paypalEmail String?

  userId String @db.ObjectId
  user User @relation("userPaymentOptions", fields: [userId], references: [id])

  vendorId String @db.ObjectId
  vendor Vendor @relation(fields: [vendorId], references: [id])
}

model PromoToolsBucket {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  voucherCount Int @default(0)
  bundlesCount Int @default(0)
  freeShippingCount Int @default(0)
  vouchers Json[]
  bundles Json[]
  freeShipping Json[]

  storeId String @db.ObjectId()
  store Store @relation(fields: [storeId], references: [id])
}

model RatingAndReviewBucket {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  count Int @default(0)
  ratingAndReviews ratingAndReview[]

  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])

  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id]) 
}

type ratingAndReview {
  id String @db.ObjectId
  rating Int?
  review String?
  answer String?
  sellerReview String?
  answeredAt DateTime?
  userInformation Json
  reviewImages String[]
  reviewImagesData Json[]
  sellerResponse Int @default(0)
  createdAt DateTime @default(now())

  product RatingAndReviewProduct

  userId String @db.ObjectId
  storeId String @db.ObjectId
  productId String @db.ObjectId
  orderedProductId String @db.ObjectId
}

type RatingAndReviewProduct {
  purchasedAt DateTime
  image String
  id String
  name String
  storeName  String
}

model QuestionsBucket {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  count Int @default(0)
  questions question[]

  productInformation productInformation 

  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

type productInformation {
  name String
  image String
}

type question {
  id String @db.ObjectId
  query String
  answer String?
  createdAt DateTime 
  answeredAt DateTime?
  userInformation questionUserInfo
  storeInformation questionStoreInfo

  userId String @db.ObjectId
}

type questionUserInfo {
  name String
}

type questionStoreInfo {
  name String
}

